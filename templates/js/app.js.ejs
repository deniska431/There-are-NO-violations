var createError = require('http-errors');
var express = require('express');
var path = require('path');
var session = require('express-session');
var bodyParser = require('body-parser');
const { User, Request, initModels } = require('./public/models/index');

// Инициализация Express
var app = express();

// Инициализация моделей
initModels();

app.use(session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 } // 1 день 
}));

app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(express.static('public'));

// Настройка шаблонизатора
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

// Middleware для добавления userId в локальные переменные
app.use((req, res, next) => {
    res.locals.userId = req.session.userId ? req.session.userId : null;
    next();
});

// Маршруты
var indexRouter = require('./routes/index');
var authRouter = require('./routes/auth');
var requestsRouter = require('./routes/create-requests');
var adminRouter = require('./routes/admin');

// Убедитесь, что adminRouter загружается первым, чтобы администратор имел доступ к своим маршрутам
app.use('/', indexRouter);
app.use('/', requestsRouter);
app.use('/', adminRouter);
app.use('/', authRouter); 

// Обработка ошибок
app.use((err, req, res, next) => {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.render('error');
});

module.exports = app;